//- - const getInputName = (f, property) => `${f.name}[${property}]`;

mixin formFor(f, options = {})
  - const { url, method = 'get' } = options;
  //- - const isStandart = _.includes(['get', 'post'], method);

  //- form(action= url method= isStandart ? method : 'post')
  form(action=url method=method.toLowerCase())
    //- if !isStandart
    //-   input(name='_method' type='hidden' placeholder= method)
    block

mixin input(f, property, options = { type: 'text' })
  //- - const value = f.object[property] === undefined ? '' : f.object[property]
  //- .form-group(class=(f.errors[property] && 'has-danger'))
  .form-group
    input.form-control(name=property type=options.type placeholder=property)
  //-   label= property
  //-   input(name=getInputName(f, property) class='form-control' type=options['as'] placeholder=`${placeholder}`)
  //-   if f.errors[property]
  //-     .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin button(f, type = 'submit')
  .form-group
    input.btn(type=type value='Save')
