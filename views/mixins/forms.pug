- const getInputName = (formObj, property) => `${formObj.name}[${property}]`

mixin formFor(options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  form.form(action=url method=isStandart ? method : 'post')
    if !isStandart
      input(name='_method' type='hidden' value=method)
    block

mixin select(property, labelText, options = {})
  - const labelId = `input for ${property}`;
  - const { values } = options;
  - const { defaultOpt } = options;
  
  .input-group.mb-2
    .input-group-prepend
      label.input-group-text(for=lableId)= labelText
    select.custom-select(
      name=getInputName(formObj, property)
      id=labelId
      required=options.required
    )
      if (defaultOpt)
        option(value=defaultOpt.value selected)= defaultOpt.text
      else
        option(value='' selected) Choose...
      each opt in values
        option(value=opt.value)= opt.text

        mixin select(property, labelText, options = {})
          - const labelId = `input for ${property}`;
          - const { values } = options;
          - const { defaultOpt } = options;
          
          .input-group.mb-2
            .input-group-prepend
              label.input-group-text(for=lableId)= labelText
            select.custom-select(
              name=getInputName(formObj, property)
              id=labelId
              required=options.required
            )
              if (defaultOpt)
                option(value=defaultOpt.value selected)= defaultOpt.text
              else
                option(value='' selected) Choose...
              each opt in values
                option(value=opt.value)= opt.text

mixin filterSelect(property, labelText, values)
  - const labelId = `input for ${property}`;

  .input-group.mb-2
    .input-group-prepend
      label.input-group-text(for=lableId)= labelText
    select.custom-select(
      name=property
      id=labelId
    )
      option(value='') Any
      each opt in values
        - const isSelected = opt.value === filters[property];

        option(value=opt.value selected=isSelected)= opt.text


mixin input(property, labelText, options = {})
  - const valueText = _.get(formObj.object, property, '');
  - options.type = _.get(options, 'type', 'text');
  - const labelId = `input for ${property}`;
  - const isInvalid = formObj.errors[property] ? 'is-invalid' : '';
  .form-label-group
    if options.textarea
      textarea.form-control(
        rows=options.rows || 3 
        class=isInvalid
        id=labelId
        value= `${property !== 'password' ? valueText : ''}`
        name=getInputName(formObj, property)
        placeholder=property
        type=options.type 
        autofocus=options.autofocus
        required=options.required
      )
    else
      input.form-control(
        class=isInvalid
        id=labelId
        value= `${property !== 'password' ? valueText : ''}`
        name=getInputName(formObj, property)
        placeholder=property
        type=options.type 
        autofocus=options.autofocus
        required=options.required
      )
    label(for=labelId)= labelText
    if formObj.errors[property]
      .invalid-feedback= formObj.errors[property].map(({ message }) => message).join('. ')
